# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from cplex_server.models.base_model_ import Model
from cplex_server import util


class Parameters(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, source_nodes: List[str]=None, dest_nodes: List[str]=None, jobs: List[str]=None, num_constraints: int=None, a: List[List[int]]=None, c: List[int]=None):  # noqa: E501
        """Parameters - a model defined in Swagger

        :param source_nodes: The source_nodes of this Parameters.  # noqa: E501
        :type source_nodes: List[str]
        :param dest_nodes: The dest_nodes of this Parameters.  # noqa: E501
        :type dest_nodes: List[str]
        :param jobs: The jobs of this Parameters.  # noqa: E501
        :type jobs: List[str]
        :param num_constraints: The num_constraints of this Parameters.  # noqa: E501
        :type num_constraints: int
        :param a: The a of this Parameters.  # noqa: E501
        :type a: List[List[int]]
        :param c: The c of this Parameters.  # noqa: E501
        :type c: List[int]
        """
        self.swagger_types = {
            'source_nodes': List[str],
            'dest_nodes': List[str],
            'jobs': List[str],
            'num_constraints': int,
            'a': List[List[int]],
            'c': List[int]
        }

        self.attribute_map = {
            'source_nodes': 'sourceNodes',
            'dest_nodes': 'destNodes',
            'jobs': 'jobs',
            'num_constraints': 'numConstraints',
            'a': 'A',
            'c': 'C'
        }

        self._source_nodes = source_nodes
        self._dest_nodes = dest_nodes
        self._jobs = jobs
        self._num_constraints = num_constraints
        self._a = a
        self._c = c

    @classmethod
    def from_dict(cls, dikt) -> 'Parameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Parameters of this Parameters.  # noqa: E501
        :rtype: Parameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_nodes(self) -> List[str]:
        """Gets the source_nodes of this Parameters.


        :return: The source_nodes of this Parameters.
        :rtype: List[str]
        """
        return self._source_nodes

    @source_nodes.setter
    def source_nodes(self, source_nodes: List[str]):
        """Sets the source_nodes of this Parameters.


        :param source_nodes: The source_nodes of this Parameters.
        :type source_nodes: List[str]
        """
        if source_nodes is None:
            raise ValueError("Invalid value for `source_nodes`, must not be `None`")  # noqa: E501

        self._source_nodes = source_nodes

    @property
    def dest_nodes(self) -> List[str]:
        """Gets the dest_nodes of this Parameters.


        :return: The dest_nodes of this Parameters.
        :rtype: List[str]
        """
        return self._dest_nodes

    @dest_nodes.setter
    def dest_nodes(self, dest_nodes: List[str]):
        """Sets the dest_nodes of this Parameters.


        :param dest_nodes: The dest_nodes of this Parameters.
        :type dest_nodes: List[str]
        """
        if dest_nodes is None:
            raise ValueError("Invalid value for `dest_nodes`, must not be `None`")  # noqa: E501

        self._dest_nodes = dest_nodes

    @property
    def jobs(self) -> List[str]:
        """Gets the jobs of this Parameters.


        :return: The jobs of this Parameters.
        :rtype: List[str]
        """
        return self._jobs

    @jobs.setter
    def jobs(self, jobs: List[str]):
        """Sets the jobs of this Parameters.


        :param jobs: The jobs of this Parameters.
        :type jobs: List[str]
        """
        if jobs is None:
            raise ValueError("Invalid value for `jobs`, must not be `None`")  # noqa: E501

        self._jobs = jobs

    @property
    def num_constraints(self) -> int:
        """Gets the num_constraints of this Parameters.


        :return: The num_constraints of this Parameters.
        :rtype: int
        """
        return self._num_constraints

    @num_constraints.setter
    def num_constraints(self, num_constraints: int):
        """Sets the num_constraints of this Parameters.


        :param num_constraints: The num_constraints of this Parameters.
        :type num_constraints: int
        """
        if num_constraints is None:
            raise ValueError("Invalid value for `num_constraints`, must not be `None`")  # noqa: E501

        self._num_constraints = num_constraints

    @property
    def a(self) -> List[List[int]]:
        """Gets the a of this Parameters.


        :return: The a of this Parameters.
        :rtype: List[List[int]]
        """
        return self._a

    @a.setter
    def a(self, a: List[List[int]]):
        """Sets the a of this Parameters.


        :param a: The a of this Parameters.
        :type a: List[List[int]]
        """
        if a is None:
            raise ValueError("Invalid value for `a`, must not be `None`")  # noqa: E501

        self._a = a

    @property
    def c(self) -> List[int]:
        """Gets the c of this Parameters.


        :return: The c of this Parameters.
        :rtype: List[int]
        """
        return self._c

    @c.setter
    def c(self, c: List[int]):
        """Sets the c of this Parameters.


        :param c: The c of this Parameters.
        :type c: List[int]
        """
        if c is None:
            raise ValueError("Invalid value for `c`, must not be `None`")  # noqa: E501

        self._c = c
